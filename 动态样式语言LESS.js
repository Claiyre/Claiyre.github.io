webpackJsonp([6,20],{787:function(n,e){n.exports={content:'<div class="picidae-toc">\n<ul>\n<li>\n<a href="#%E5%89%8D%E8%A8%80">前言</a>\n</li>\n<li>\n<a href="#%E6%AD%A3%E6%96%87">正文</a>\n<ul>\n<li>\n<a href="#%E8%AF%AD%E6%B3%95">语法</a>\n<ul>\n<li>\n<a href="#%E5%8F%98%E9%87%8F">变量</a>\n</li>\n<li>\n<a href="#%E6%B7%B7%E5%90%88">混合</a>\n</li>\n<li>\n<a href="#%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E6%B7%B7%E5%90%88">带参数的混合</a>\n</li>\n<li>\n<a href="#%E5%B5%8C%E5%A5%97%E8%A7%84%E5%88%99">嵌套规则</a>\n</li>\n<li>\n<a href="#%E9%A2%9C%E8%89%B2%E5%87%BD%E6%95%B0">颜色函数</a>\n</li>\n<li>\n<a href="#math%E5%87%BD%E6%95%B0">math函数</a>\n</li>\n<li>\n<a href="#%E5%8C%B9%E9%85%8D%E6%A8%A1%E5%BC%8F">匹配模式</a>\n</li>\n<li>\n<a href="#%E5%AF%BC%E5%BC%95">导引</a>\n</li>\n<li>\n<a href="#%E5%AF%BC%E5%85%A5">导入</a>\n</li>\n<li>\n<a href="#%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F">变量作用域</a>\n</li>\n<li>\n<a href="#%E6%B3%A8%E9%87%8A">注释</a>\n</li>\n</ul>\n</li>\n<li>\n<a href="#%E4%BD%BF%E7%94%A8">使用</a>\n<ul>\n<li>\n<a href="#%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8">客户端使用</a>\n</li>\n<li>\n<a href="#%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BD%BF%E7%94%A8">服务器端使用</a>\n</li>\n<li>\n<a href="#%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E6%89%8B%E5%8A%A8%E5%B0%86less%E7%BC%96%E8%AF%91%E4%B8%BAcss%E6%96%87%E4%BB%B6">在命令行中手动将less编译为css文件</a>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<a href="#%E7%BB%93%E8%AF%AD">结语</a>\n</li>\n</ul>\n</div>\n<blockquote>\n<p>博客原文地址：<a href="https://claiyre.github.io/">Claiyre的个人博客 https://claiyre.github.io/</a>\n博客园地址：<a href="http://www.cnblogs.com/nuannuan7362/">http://www.cnblogs.com/nuannuan7362/</a>\n如需转载，请在文章开头注明原文地址</p>\n</blockquote>\n<h1 id="前言"><a href="#%E5%89%8D%E8%A8%80" aria-hidden="true"><span class="icon icon-link"></span></a>前言</h1>\n<p>less作为css语言的扩展，赋予了css动态语言的特性，如：变量，继承，运算，函数等。如果你原本就是程序员，你一定会非常喜爱less，它可以帮你节省很多重复工作，可以让你像编写一门动态语言一样地编写css。\n本文总结了less的相关语法和使用方式，可供查阅和入门使用。</p>\n<!--more-->\n<h1 id="正文"><a href="#%E6%AD%A3%E6%96%87" aria-hidden="true"><span class="icon icon-link"></span></a>正文</h1>\n<h2 id="语法"><a href="#%E8%AF%AD%E6%B3%95" aria-hidden="true"><span class="icon icon-link"></span></a>语法</h2>\n<h3 id="变量"><a href="#%E5%8F%98%E9%87%8F" aria-hidden="true"><span class="icon icon-link"></span></a>变量</h3>\n<p>less允许使用变量，可以将一个多次用到的值设为一个变量。less中没有类型限制，以符号<strong>@</strong>标识变量，在声明或使用变量时再变量名前添加符号@即可</p>\n<pre><code data-query="{}" data-lang="">@bg-color: #fff;\n@base-font-size: 16px;\n\n//使用\n\n.body{\n    background-color: @bg-color;\n    font-size: @base-font-size;\n}\n</code></pre>\n<p>多数情况下，我们是将这个<strong>变量</strong>当做一个<strong>常量</strong>来使用；less中变量也只能被定义一次这一点使之更像常量。</p>\n<h3 id="混合"><a href="#%E6%B7%B7%E5%90%88" aria-hidden="true"><span class="icon icon-link"></span></a>混合</h3>\n<p>将需要用到多次的全局css样式集成为一个css类，在其他类中可以直接引用这个集成类，这个过程称为混合。\n实例：</p>\n<pre><code data-query="{}" data-lang="">.base-border{\n    border: 2px solid #0c6dc7;\n    border-radius: 6px;\n}\n\n.img-top{\n    width: 150px;\n    height: 150px;\n    .base-border\n}\n.img-bottom{\n    width: 200px;\n    height: 150px;\n    .base-border\n}\n</code></pre>\n<p>上面的会被解析为</p>\n<pre><code data-query="{}" data-lang="">.img-top{\n    width: 150px;\n    height: 150px;\n    border: 2px solid #0c6dc7;\n    border-radius: 6px;\n}\n.img-bottom{\n    width: 200px;\n    height: 150px;\n    border: 2px solid #0c6dc7;\n    border-radius: 6px;\n}\n</code></pre>\n<p>个人认为混合与传统OO语言的继承颇为相似，子类继承父类的特征的同时，也可以添加自己专有的特征。</p>\n<h3 id="带参数的混合"><a href="#%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E6%B7%B7%E5%90%88" aria-hidden="true"><span class="icon icon-link"></span></a>带参数的混合</h3>\n<p>在使用混合时，less允许给父类传入参数，参数使我们可以更加灵活地运用混合\n比如，可以稍微改动上面的<code>.base-border</code>类</p>\n<pre><code data-query="{}" data-lang="">.base-border(@radius){\n    border: 2px solid #0c6dc7;\n    border-radius: @radius;\n}\n\n//使用\n.img-top{\n    width: 150px;\n    height: 150px;\n    .base-border(10px);\n}\n.img-bottom{\n    width: 200px;\n    height: 150px;\n    .base-border(15px);\n}\n</code></pre>\n<p>还可以设置参数的默认值，多个参数用逗号隔开：</p>\n<pre><code data-query="{}" data-lang="">.base-border(@color: #0c6dc7,@radius: 6px){\n    border: 2px solid @color;\n    border-radius: @radius;\n}\n\n//使用\n.img-top{\n    width: 150px;\n    height: 150px;\n    .base-border;  //默认是颜色#0c6dc7，半径6px\n}\n.img-bottom{\n    width: 200px;\n    height: 150px;\n    .base-border(#ff0000,15px);\n}\n</code></pre>\n<p>在一个带参数的类中，我们可以通过<code>@arguments</code>来获取传进来的所有参数，可以整体作为某个属性的值。</p>\n<h3 id="嵌套规则"><a href="#%E5%B5%8C%E5%A5%97%E8%A7%84%E5%88%99" aria-hidden="true"><span class="icon icon-link"></span></a>嵌套规则</h3>\n<p>嵌套规则基于html的文档结构，可以减少我们对一些css选择器的使用，使代码更易懂，更简洁。\n例如，我们需要设置这样的样式：</p>\n<pre><code data-query="{}" data-lang="">.parent{\n    background-color: #ff0000;\n}\n\n.parent .child{\n    height: 200px;\n    width: 200px;\n}\n.parent.ancestor{\n    border: 2px solid #000;\n}\n</code></pre>\n<p>用less可以这样嵌套，文档结构更加明显：</p>\n<pre><code data-query="{}" data-lang="">.parent{\n    background-color: #ff0000;\n    .child{\n        height: 200px;\n        width: 200px;\n    }\n    &#x26;.ancestor{\n        border: 2px solid #000;\n    }\n}\n</code></pre>\n<p>符号<code>&#x26;</code>,表示“and”，也可以理解为父级选择器。</p>\n<h3 id="颜色函数"><a href="#%E9%A2%9C%E8%89%B2%E5%87%BD%E6%95%B0" aria-hidden="true"><span class="icon icon-link"></span></a>颜色函数</h3>\n<p>less提供了多个颜色运算的函数，非常方便</p>\n<table>\n<thead>\n<tr>\n<th align="center">函数</th>\n<th align="center">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center">lighten(@color,10%)</td>\n<td align="center">返回一个比\n<code>@color</code>\n亮10%的颜色</td>\n</tr>\n<tr>\n<td align="center">darken(@color,10%)</td>\n<td align="center">返回一个比\n<code>@color</code>\n暗10%的颜色</td>\n</tr>\n<tr>\n<td align="center">saturate(@color,10%)</td>\n<td align="center">返回一个比\n<code>@color</code>\n饱和度高10%的颜色</td>\n</tr>\n<tr>\n<td align="center">desaturate(@color,10%)</td>\n<td align="center">返回一个比\n<code>@color</code>\n饱和度低10%的颜色</td>\n</tr>\n<tr>\n<td align="center">fadein(@color,10%)</td>\n<td align="center">返回一个比\n<code>@color</code>\n透明度低10%的颜色，透明度低，颜色更深</td>\n</tr>\n<tr>\n<td align="center">fadeout(@color,10%)</td>\n<td align="center">返回一个比\n<code>@color</code>\n透明度高10%的颜色，透明度高，颜色更浅</td>\n</tr>\n<tr>\n<td align="center">fade(@color,90%)</td>\n<td align="center">返回一个透明度为0.9的颜色，等于fadeout(@color,10%)</td>\n</tr>\n<tr>\n<td align="center">spin(@color,10)</td>\n<td align="center">返回颜色的hue值比\n<code>@color</code>\n大10度</td>\n</tr>\n<tr>\n<td align="center">spin(@color,-10)</td>\n<td align="center">返回颜色的hue值比\n<code>@color</code>\n小10度</td>\n</tr>\n<tr>\n<td align="center">mix(@color-1,@color-2)</td>\n<td align="center">返回\n<code>@color-1</code>\n和\n<code>@color-2</code>\n混合后的颜色</td>\n</tr>\n</tbody>\n</table>\n<p>这些颜色运算函数会先将颜色转化为HSL色彩空间，然后在通道级别运算</p>\n<h3 id="math函数"><a href="#math%E5%87%BD%E6%95%B0" aria-hidden="true"><span class="icon icon-link"></span></a>math函数</h3>\n<p>less还提供了几个math函数，用来处理数字</p>\n<table>\n<thead>\n<tr>\n<th align="center">函数</th>\n<th align="center">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center">ceil(@number)</td>\n<td align="center">向上取整</td>\n</tr>\n<tr>\n<td align="center">floor(@number)</td>\n<td align="center">向下取整</td>\n</tr>\n<tr>\n<td align="center">round(@number)</td>\n<td align="center">四舍五入</td>\n</tr>\n</tbody>\n</table>\n<h3 id="匹配模式"><a href="#%E5%8C%B9%E9%85%8D%E6%A8%A1%E5%BC%8F" aria-hidden="true"><span class="icon icon-link"></span></a>匹配模式</h3>\n<p>less匹配即判断是否满足条件，相当于switch或if-else if的用法，弥补了less不支持switchh和if的缺憾。\n实例用法：</p>\n<pre><code data-query="{}" data-lang="">.special-border(top,@color){      // 匹配top 1\n    border-top: 2px solid @color;\n    border-top-left-radius: 10px;\n    border-top-right-radius: 20px;\n}\n.special-border(bottom,@color){      // 匹配bottom 2\n    border-bottom: 2px solid @color;\n    border-bottom-left-radius: 5px;\n    border-bottom-right-radius: 10px;\n}\n.special-border(@_,@color){ //匹配所有  3\n    border-right: 2px solid @color;\n    border-left: 2px solid @color;\n}\n\n.content{\n    .special-border(bottom, #73d79c);\n    height: 200px;\n    width: 200px;\n}\n</code></pre>\n<p>上述代码中<code>.content</code>类匹配了2和3</p>\n<h3 id="导引"><a href="#%E5%AF%BC%E5%BC%95" aria-hidden="true"><span class="icon icon-link"></span></a>导引</h3>\n<p>导引是对参数是否满足一定条件的匹配，不是对参数值得匹配。搭配when语句使用。</p>\n<pre><code data-query="{}" data-lang="">.class(@a) when(@a > 10){ ... }\n\n.class(@a) when(iscolor(@a)){ ... }\n\n.class(@this-media) when(@this-media = mobile){ ... }\n\n.class(@a) when(@a){ ... } //仅当@a = true 时才可匹配\n</code></pre>\n<p>注意，在导引后的when语句中，若是只有单独的值，则除布尔值<code>true</code>以外的任何值都被视作假</p>\n<h3 id="导入"><a href="#%E5%AF%BC%E5%85%A5" aria-hidden="true"><span class="icon icon-link"></span></a>导入</h3>\n<p>在文件开头通过关键字<code>@import</code>导入其他样式文件</p>\n<pre><code data-query="{}" data-lang="">@import "style.less"\n@import "style"\n\n@import "style.css"\n</code></pre>\n<p>以<code>.less</code>为后缀的文件的后缀名带不带均可\n另： less不会处理<code>.css</code>的文件</p>\n<h3 id="变量作用域"><a href="#%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F" aria-hidden="true"><span class="icon icon-link"></span></a>变量作用域</h3>\n<p>less中的变量作用域和其他语言类似，首先会从本地查找变量或者混合模块，如果没找到的话会去父级作用域中查找，直到找到为止.</p>\n<h3 id="注释"><a href="#%E6%B3%A8%E9%87%8A" aria-hidden="true"><span class="icon icon-link"></span></a>注释</h3>\n<p>两种注释方法，应注意其区别：</p>\n<pre><code data-query="{}" data-lang="">/*这是注释，编译为css后不会被滤掉*/\n\n//这也是注释，编译为css后会被滤掉\n</code></pre>\n<h2 id="使用"><a href="#%E4%BD%BF%E7%94%A8" aria-hidden="true"><span class="icon icon-link"></span></a>使用</h2>\n<p>less可以在客户端使用，也可以在服务端使用</p>\n<h3 id="客户端使用"><a href="#%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8" aria-hidden="true"><span class="icon icon-link"></span></a>客户端使用</h3>\n<ol>\n<li>在html头部引入你的<code>.less</code>样式文件</li>\n<li>在html头部引入<code>less.js</code>文件</li>\n</ol>\n<p>上述引入文件的顺序不可颠倒</p>\n<h3 id="服务器端使用"><a href="#%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BD%BF%E7%94%A8" aria-hidden="true"><span class="icon icon-link"></span></a>服务器端使用</h3>\n<ol>\n<li>先安装，最简便的方法是通过npm包管理器安装</li>\n</ol>\n<pre><code data-query="{}" data-lang="">$ npm install less\n\n// 或安装最新稳定版本的 LESS\n $ npm install less@latest  \n</code></pre>\n<ol start="2">\n<li>在文件头部通过require引入less即可使用</li>\n</ol>\n<h3 id="在命令行中手动将less编译为css文件"><a href="#%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E6%89%8B%E5%8A%A8%E5%B0%86less%E7%BC%96%E8%AF%91%E4%B8%BAcss%E6%96%87%E4%BB%B6" aria-hidden="true"><span class="icon icon-link"></span></a>在命令行中手动将less编译为css文件</h3>\n<pre><code data-query="{}" data-lang="">$ lessc styles.less > styles.css\n</code></pre>\n<h1 id="结语"><a href="#%E7%BB%93%E8%AF%AD" aria-hidden="true"><span class="icon icon-link"></span></a>结语</h1>\n<p>less并未减弱css的任何强大之处，在任何时候都可以回退至原始css，同时让习惯动态语言的程序员可以更方便地编写less。与其功能类似的有sass，两者各有优点，都值得一学。</p>\n',extra:{}}}});