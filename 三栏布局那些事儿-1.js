webpackJsonp([8,20],{785:function(n,a){n.exports={content:'<div class="picidae-toc">\n<ul>\n<li>\n<a href="#%E6%AD%A3%E6%96%87">正文</a>\n<ul>\n<li>\n<a href="#1%E3%80%81%E6%B5%AE%E5%8A%A8%E5%B8%83%E5%B1%80">1、浮动布局</a>\n</li>\n<li>\n<a href="#2%E3%80%81%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%B8%83%E5%B1%80">2、绝对定位布局</a>\n</li>\n<li>\n<a href="#3%E3%80%81%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80">3、圣杯布局</a>\n</li>\n<li>\n<a href="#4%E3%80%81%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80">4、双飞翼布局</a>\n</li>\n<li>\n<a href="#5%E3%80%81%E4%BD%BF%E7%94%A8flex%E5%B8%83%E5%B1%80">5、使用flex布局</a>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<blockquote>\n<p>博客原文地址：<a href="https://claiyre.github.io/">Claiyre的个人博客 https://claiyre.github.io/</a>\n如需转载，请在文章开头注明原文地址\n人无远虑，必有近忧。</p>\n</blockquote>\n<p>中间宽度自适应，两边宽度固定的三栏布局，是前端页面开发中极为常见网站布局方式。博主认为，一名合格的前端工程师总是会将之熟记于心。\n以下是博主总结的五种三栏布局的常用方法，与大家分享。</p>\n<!--more-->\n<h2 id="正文"><a href="#%E6%AD%A3%E6%96%87" aria-hidden="true"><span class="icon icon-link"></span></a>正文</h2>\n<hr>\n<h3 id="1、浮动布局"><a href="#1%E3%80%81%E6%B5%AE%E5%8A%A8%E5%B8%83%E5%B1%80" aria-hidden="true"><span class="icon icon-link"></span></a>1、浮动布局</h3>\n<p>浮动布局是一种极易理解，也是初学者首先想到的布局方式。仅借用CSS的float属性即可轻松实现。\nhtml代码</p>\n<pre><code data-query="{}" data-lang="">&#x3C;div class="left">Left&#x3C;/div>\n&#x3C;div class="right">Right&#x3C;/div>\n&#x3C;div class="main">Main&#x3C;/div>\n&#x3C;!-- 注意其先后顺序，main必须在left和right后-->\n</code></pre>\n<p>CSS代码</p>\n<pre><code data-query="{}" data-lang="">.left{\n            background-color: #ffd0d0;\n            width: 160px;\n            height: 400px;\n            float: left;\n        }\n.right{\n            background-color: #a9ffa9;\n            width: 160px;\n            height: 400px;\n            float: right;\n        }\n.main{\n            background-color: #ffffa9;\n            height: 500px;\n            width: auto;\n        }\n</code></pre>\n<p><strong>注意html代码中三栏的先后顺序</strong>\n浮动布局的优点是简单，但也有不少缺点：</p>\n<ol>\n<li>\n<p>主要内容main在文档后侧，所以直到最后才能渲染主要内容。</p>\n</li>\n<li>\n<p>left和right其实是浮动到了main上面，也就是说，当主栏高度大于侧栏高度时（这种情况极为常见），main下面的部分内容会和页面同宽。不多说，下面一张图胜过千言万语。</p>\n<p><img src="http://p1.bpimg.com/567571/b99d421fb6e59525.jpg"></p>\n</li>\n</ol>\n<h3 id="2、绝对定位布局"><a href="#2%E3%80%81%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%B8%83%E5%B1%80" aria-hidden="true"><span class="icon icon-link"></span></a>2、绝对定位布局</h3>\n<p> 仅两个侧栏使用绝对定位，脱离文档流，始终在页面的两边。然后，为了避免主栏和侧栏内容重叠，给主栏设置外边距，其数值等于侧栏宽度。\nhtml代码</p>\n<pre><code data-query="{}" data-lang="">&#x3C;div class="main">Main&#x3C;/div>\n&#x3C;div class="right">Right&#x3C;/div>\n&#x3C;div class="left">Left&#x3C;/div>\n</code></pre>\n<p>CSS代码</p>\n<pre><code data-query="{}" data-lang="">.main{\n            background-color: #ffffa9;\n            height: 500px;\n            width: auto;\n            margin: 0 160px;\n           /* min-width: 200px;  */\n\n        }\n.left{\n            background-color:#ffd0d0;\n            width:160px;\n            height: 400px;\n            position: absolute;\n            top: 0;\n            left: 0;\n        }\n.right{\n            background-color: #a9ffa9;\n            width: 160px;\n            height: 400px;\n            position: absolute;\n            top: 0;\n            right: 0;\n        }\n</code></pre>\n<p>用绝对定位布局思路简单清晰，但有一个明显的缺点，就是如果中间栏有最小宽度限制，当浏览器 缩小至一定程度时，会出现层叠现象。如下图</p>\n<p><img src="http://i1.piimg.com/567571/ef5fb0077aed7586.png"></p>\n<h3 id="3、圣杯布局"><a href="#3%E3%80%81%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80" aria-hidden="true"><span class="icon icon-link"></span></a>3、圣杯布局</h3>\n<p>最为经典的圣杯布局，其思路主要是借用<strong>浮动</strong>分别将左栏和右栏浮动至主栏的两边；然后用外层容器的<strong>内边距</strong>将主栏两边“推”向中间一定宽度，给左栏和右栏腾出空间；最后借助<strong>相对定位</strong> 将左栏和右栏定位至合适位置即可。\n话不多说，先上代码：\n<strong>html代码</strong></p>\n<pre><code data-query="{}" data-lang="">&#x3C;div class="container">\n    &#x3C;div class="main">Main&#x3C;/div>\n    &#x3C;div class="left">Left&#x3C;/div>\n    &#x3C;div class="right">Right&#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<p><strong>CSS代码</strong></p>\n<pre><code data-query="{}" data-lang="">.container{\n        /*向中间“推”主栏，给两个侧栏 腾地儿*/                              \n        padding: 0 160px;   \n}\n .main{\n            background-color: #ffffa9;                           \n            width: 100%;        /*主栏宽度设置为100%，自适应*/\n            height: 500px;\n            float: left;\n        }\n.left{\n            background-color:#ffd0d0;\n            width: 160px;\n            height: 500px;\n            position: relative;\n            float: left;\n            /*左侧外边距为-100%，也就是主栏的宽度，使.left上浮，且左移至main的左边*/\n            margin-left:-100%;\n            /*.left继续左移，直到屏幕的最左边，此时.left正好占据.container左边padding的160px*/\n            left: -160px;\n        }\n.right{\n            background-color: #a9ffa9;\n            width: 160px;\n            height: 400px;\n            float: right;\n            /*上移至容器最右边*/\n            margin-right: -160px;\n            position: relative;\n        }\n</code></pre>\n<p>注意，main（也就是主栏）在最前面，两个侧栏尾随其后，当然左栏和右栏谁在前谁在后都是可以的。这样布局的<strong>好处</strong>是：主栏在文档的前面，所以重要的东西会优先渲染。</p>\n<h3 id="4、双飞翼布局"><a href="#4%E3%80%81%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80" aria-hidden="true"><span class="icon icon-link"></span></a>4、双飞翼布局</h3>\n<p>双飞翼布局是对圣杯布局的优化，以增加一个div为代价换取<strong>去掉了相对布局</strong>。\n“双飞翼”，顾名思义，是在main外围增加一个div（.main-outer），然后给.main-outer设置左右内边距（或者给main设置外边距，效果相同），像两个翅膀。两侧栏上浮后刚好位于.main-outer的内边距处，因此内边距的值需等于侧栏的宽度.\nhtml代码</p>\n<pre><code data-query="{}" data-lang="">&#x3C;div class="container">\n    &#x3C;div class="main-outer">\n        &#x3C;div class="main">Main&#x3C;/div>\n    &#x3C;/div>\n    &#x3C;div class="left">Left&#x3C;/div>\n    &#x3C;div class="right">Right&#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<p>CSS代码</p>\n<pre><code data-query="{}" data-lang=""> .main-outer{\n            box-sizing: border-box;\n            padding: 0 160px;\n            width: 100%;\n            float: left;\n        }\n .main{\n            background-color: #ffffa9;\n            height: 500px;\n        }\n .left{\n            background-color:#ffd0d0;\n            width:160px;\n            height: 400px;\n            float: left;\n            margin-left:-100%;\n        }\n.right{\n            background-color: #a9ffa9;\n            width: 160px;\n            height: 400px;\n            float: left;\n            margin-left: -160px;\n        }        \n</code></pre>\n<p>主栏内容同样在文档的开头部分，优先渲染。双飞翼布局不需使用相对定位，相对来说更易理解。</p>\n<h3 id="5、使用flex布局"><a href="#5%E3%80%81%E4%BD%BF%E7%94%A8flex%E5%B8%83%E5%B1%80" aria-hidden="true"><span class="icon icon-link"></span></a>5、使用flex布局</h3>\n<p>是时候拿出终极武器了，flex布局。万能的flex啊，赐我以能量吧！</p>\n<p>html代码</p>\n<pre><code data-query="{}" data-lang="">&#x3C;div class="container">\n    &#x3C;div class="left">Left&#x3C;/div>\n    &#x3C;div class="main">Main&#x3C;/div>\n    &#x3C;div class="right">Right&#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<p>CSS代码</p>\n<pre><code data-query="{}" data-lang="">.container{\n            display: flex;\n            \n            /*以下是默认属性，不写也行，为便于理解，博主在此将其罗列出来\n            flex-flow: row nowrap;\n            justify-content: flex-start;\n            align-items: flex-start;   */\n        }\n.main{\n            background-color: #ffffa9;\n            height: 500px;\n            width:100%;  \n        }\n.left{\n            background-color:#ffd0d0;\n            width:160px;\n            height: 400px;\n        }\n.right{\n            background-color: #a9ffa9;\n            width: 160px;\n            height: 400px;\n        }\n</code></pre>\n<p>上面代码有一个缺陷，就是在html代码中，left，main，right的相对位置不能改变，这就导致了main中的主要内容不能被优先渲染。那怎么办呢？(≧∀≦)ゞ</p>\n<p>万能的flex当然有办法咯！\n给.mian.left.right三个类中添加如下代码：</p>\n<pre><code data-query="{}" data-lang="">.left{\n    order: 1;\n}\n.main{\n    order: 2;\n}\n.right{\n    order: 3;\n}\n</code></pre>\n<p>搞定！</p>\n<hr>\n<p>以上五种方法各有优缺点，根据实际情况挑选适合项目的即可，大的项目的尽量使用main内容可优先渲染的。</p>\n',extra:{}}}});