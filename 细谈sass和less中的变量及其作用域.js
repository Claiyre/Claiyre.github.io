webpackJsonp([3,20],{790:function(n,a){n.exports={content:'<div class="picidae-toc">\n<ul>\n<li>\n<a href="#%E5%89%8D%E8%A8%80">前言</a>\n</li>\n<li>\n<a href="#%E6%AD%A3%E6%96%87">正文</a>\n<ul>\n<li>\n<ul>\n<li>\n<a href="#%E5%8F%98%E9%87%8F%E6%A0%87%E8%AF%86%E7%AC%A6%E4%B8%8D%E5%90%8C">变量标识符不同</a>\n</li>\n<li>\n<a href="#%E5%8F%98%E9%87%8F%E6%8F%92%E5%80%BC%E6%96%B9%E5%BC%8F%E4%B8%8D%E5%90%8C">变量插值方式不同</a>\n</li>\n<li>\n<a href="#%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F">变量作用域</a>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<a href="#%E7%BB%93%E8%AF%AD">结语</a>\n</li>\n</ul>\n</div>\n<blockquote>\n<p>博客原文地址：<a href="https://claiyre.github.io/">Claiyre的个人博客 https://claiyre.github.io/</a>\n博客园地址：<a href="http://www.cnblogs.com/nuannuan7362/">http://www.cnblogs.com/nuannuan7362/</a>\n如需转载，请在文章开头注明原文地址</p>\n</blockquote>\n<h1 id="前言"><a href="#%E5%89%8D%E8%A8%80" aria-hidden="true"><span class="icon icon-link"></span></a>前言</h1>\n<p>众所周知，css是静态语言，虽功能强大，但用起来还是略微不爽，于是便有了动态样式语言，sass和less。动态样式语言的精髓就在于其有了变量，其中的诸多功能都是建立在变量之上的。因此，彻底弄懂sass和less中变量的异同之处，是学好它们的关键！\n本文由浅至深，逐步展开介绍，并从大家所熟知的JS变量的角度，讲述sass和less变量作用域。</p>\n<!--more-->\n<h1 id="正文"><a href="#%E6%AD%A3%E6%96%87" aria-hidden="true"><span class="icon icon-link"></span></a>正文</h1>\n<p>sass和less都允许使用变量，且对变量的类型没有限制，这一点和js极为相似，非常灵活。但两者的不同都有哪些呢？</p>\n<h3 id="变量标识符不同"><a href="#%E5%8F%98%E9%87%8F%E6%A0%87%E8%AF%86%E7%AC%A6%E4%B8%8D%E5%90%8C" aria-hidden="true"><span class="icon icon-link"></span></a>变量标识符不同</h3>\n<p>sass中规定，以美元符号 <code>$</code> 开头的即表示变量，而less中以符号 <code>@</code> 开头表示变量。这点很容易理解，不再多说。</p>\n<h3 id="变量插值方式不同"><a href="#%E5%8F%98%E9%87%8F%E6%8F%92%E5%80%BC%E6%96%B9%E5%BC%8F%E4%B8%8D%E5%90%8C" aria-hidden="true"><span class="icon icon-link"></span></a>变量插值方式不同</h3>\n<p>在两种语言中，变量都可以以一定的方式插入到字符串中去，这个特性极为有用，但两种语言的插入方式不同，具体请看下例：</p>\n<pre><code data-query="{}" data-lang="">//sass 中\n\n$direction: left;\n.myPadding{\n    padding-#{$direction}: 20px;                             \n}\n\n//less中\n\n@direction: left;\n\n.myPadding{\n    padding-@{direction}: 20px;\n}\n\n\n//编译后的css代码是相同的，如下：\n\n.myPadding{\n    padding-left: 20px;\n}\n</code></pre>\n<h3 id="变量作用域"><a href="#%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F" aria-hidden="true"><span class="icon icon-link"></span></a>变量作用域</h3>\n<p>在sass <strong>3.4.0</strong>之前，sass可以说是没有局部变量和全局变量之分的，即后声明的同名变量总是会覆盖之前的同名变量，不管后声明的变量是位于何处。\n此时，less和sass的变量作用域有很大的不同之处。先看一段熟悉的js代码：</p>\n<pre><code data-query="{}" data-lang="">//代码块A\n\nvar a = 1;\n(function (){\n    a = 5;\n    alert(a);             //a = 5;\n})();\nalert(a);                 //a = 5;\n</code></pre>\n<p>由于闭包的作用，匿名函数内部可以引用到外部的变量a,因此上面的代码可以正常运行。再来看下面这个:</p>\n<pre><code data-query="{}" data-lang="">//代码块B\n\nvar a = 1;\n(function (){\n    var a = 5;\n    alert(a);             //a = 5;\n})();\nalert(a);                 //a = 1;\n</code></pre>\n<p>了解js链式作用域的朋友一定秒懂了上面的代码。\n在匿名函数的内部声明了一个局部变量，局部变量并不会影响全部变量，所以代码最后输出的仍然是1。</p>\n<p>那么回到正题，sass 3.4.0之前 的变量设计思想是类似于<strong>代码块A</strong>的，即不带关键字<code>var</code>的局部变量声明，而less的思想类似<strong>代码块B</strong>，带关键字<code>var</code>的局部变量声明。</p>\n<p>看到这，很多人估计就想开始吐槽sass不人性化的设计了，万一我一不小心声明了一个局部变量，它和某个全局变量同名了，那不岂不是要酿成大祸！\n大家先别急着吐槽，人家sass这不是也改进了嘛~ 而且sass不仅改了，还附送了彩蛋 <code>!global</code></p>\n<p><a href="http://sass-lang.com/documentation/file.SASS_CHANGELOG.html">sass官网</a>上 3.4.0版本的 <strong>Backwards Incompatibilities – Must Read!</strong> 中有这样一条：</p>\n<blockquote>\n<p>All variable assignments not at the top level of the document are now local by default. If there’s a global variable with the same name, it won’t be overwritten unless the !global flag is used. For example, $var: value !global will assign to $var globally. This behavior can be detected using feature-exists(global-variable-shadowing).</p>\n</blockquote>\n<p>翻译过来便是：没有位于第一层（全局）的变量声明现在都被默认为是局部的。如果存在一个同名的全局变量，这个全局变量也不会被重写，除非同名的局部变量被声明时使用关键字<code>!default</code>。</p>\n<p>举例说明：</p>\n<pre><code data-query="{}" data-lang="">$color: blue;\na{\n    $color: red;\n    color: $color;         //red\n}\np{\n    color: $color;         //blue\n}\n\n//但是，若使用 !global\n\nspan{\n    $color: yellow !global;\n    color: $color;               //yellow\n}\ndiv{\n    color: $color;               //yellow\n}\n</code></pre>\n<p>上面的代码没有什么实际意义，但作为例子，简洁明了便好。</p>\n<p>有一点需要说明的是，sass 3.4.0 是在14年8月份发布的，但现在网上的关于sass变量的文章对作用域的说明，大多仍旧停留在3.4.0之前。希望大家能注意sass这个重要的改进，以免在开发过程中带来不便。在此也得出一个血泪教训，尽量看英文官方文档啊啊啊啊</p>\n<h1 id="结语"><a href="#%E7%BB%93%E8%AF%AD" aria-hidden="true"><span class="icon icon-link"></span></a>结语</h1>\n<p>sass和less两种动态样式语言的诞生，赋予了css更大的灵活性，在学习使用的过程中，一定要注意区分两者的不同，灵活运用。</p>\n<p>参考：</p>\n<ul>\n<li><a href="http://www.w3cplus.com/preprocessor/sass-basic-variable.html">http://www.w3cplus.com/preprocessor/sass-basic-variable.html</a></li>\n<li><a href="http://sass-lang.com/documentation/file.SASS_CHANGELOG.html">http://sass-lang.com/documentation/file.SASS_CHANGELOG.html</a></li>\n</ul>\n<p>以上仅我个人见解，如有错误之处，欢迎指正。如您觉得我的文章对您有帮助，请点击下方“推荐”，让更多的人看到。</p>\n',extra:{}}}});